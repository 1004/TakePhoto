{
  "name": "Takephoto",
  "tagline": "一款用于在Android设备上获取照片（拍照或从相册、文件中选择）、裁剪图片、压缩图片的开源工具库",
  "body": "## [TakePhoto](https://github.com/crazycodeboy/TakePhoto) 简介  \r\n`TakePhoto`是一款用于在Android设备上获取照片（拍照或从相册、文件中选择）、裁剪图片、压缩图片的开源工具库，目前最新版本[3.0.0](https://github.com/crazycodeboy/TakePhoto/)。  \r\n3.0以下版本及API说明，详见[TakePhoto2.0+](https://github.com/crazycodeboy/TakePhoto/blob/master/README.2+.md)。  \r\n\r\n**V3.0**    \r\n\r\n- 支持通过相机拍照获取图片\r\n- 支持从相册选择图片\r\n- 支持从文件选择图片  \r\n- 支持批量图片选取\r\n- 支持图片压缩以及批量图片压缩\r\n- 支持图片裁切以及批量图片裁切\r\n- 支持照片旋转角度自动纠正\r\n- 支持自动权限管理(无需关心SD卡及摄像头权限等问题)\r\n- 支持对裁剪及压缩参数个性化配置  \r\n- 提供自带裁剪工具(可选)  \r\n- 支持智能选取及裁剪异常处理\r\n- 支持因拍照Activity被回收后的自动恢复   \r\n- 支持Android7.0\r\n\r\n\r\nGitHub地址： [https://github.com/crazycodeboy/TakePhoto](https://github.com/crazycodeboy/TakePhoto)\r\n## 目录\r\n\r\n- [安装说明](#安装说明)\r\n- [演示](#演示)\r\n- [使用说明](#使用说明)\r\n- [API](#api)\r\n- [兼容性](#兼容性)\r\n- [贡献](#贡献)\r\n\r\n## 安装说明  \r\n**Gradle:**  \r\n\r\n```groovy\r\n    compile 'com.jph.takephoto:takephoto_library:3.0.0'\r\n```\r\n\r\n**Maven:**  \r\n\r\n```groovy\r\n<dependency>\r\n  <groupId>com.jph.takephoto</groupId>\r\n  <artifactId>takephoto_library</artifactId>\r\n  <version>3.0.0</version>\r\n  <type>pom</type>\r\n</dependency>\r\n```  \r\n\r\n\r\n## 演示 \r\n\r\n运行效果图：    \r\n![预览图](https://raw.githubusercontent.com/crazycodeboy/TakePhoto/master/Screenshots/takephoto_preview.png)\r\n![运行效果图](https://raw.githubusercontent.com/crazycodeboy/TakePhoto/master/Screenshots/%E9%A2%84%E8%A7%88%E5%9B%BE.jpg)\r\n\r\n\r\n## 使用说明   \r\n\r\n### 使用TakePhoto有以下两种方式：\r\n**方式一：通过继承的方式**  \r\n1. 继承`TakePhotoActivity`、`TakePhotoFragmentActivity`、`TakePhotoFragment`三者之一。  \r\n2. 通过`getTakePhoto()`获取`TakePhoto`实例进行相关操作。  \r\n3. 重写以下方法获取结果        \r\n\r\n```java\r\n void takeSuccess(TResult result);\r\n void takeFail(TResult result,String msg);\r\n void takeCancel();\r\n```  \r\n此方式使用简单，满足的大部分的使用需求，具体使用详见[simple](https://github.com/crazycodeboy/TakePhoto/blob/master/simple/src/main/java/com/jph/simple/SimpleActivity.java)。如果通过继承的方式无法满足实际项目的使用，可以通过下面介绍的方式。  \r\n\r\n**方式二：通过组装的方式**  \r\n\r\n可参照：[TakePhotoActivity](https://github.com/crazycodeboy/TakePhoto/blob/master/takephoto_library/src/main/java/com/jph/takephoto/app/TakePhotoActivity.java)，以下为主要步骤：  \r\n\r\n1.实现`TakePhoto.TakeResultListener,InvokeListener`接口。\r\n\r\n2.在 `onCreate`,`onActivityResult`,`onSaveInstanceState`方法中调用TakePhoto对用的方法。  \r\n\r\n3.重写`onRequestPermissionsResult(int requestCode, String[] permissions, int[] grantResults)`，添加如下代码。\r\n\r\n```java\r\n  @Override\r\n    public void onRequestPermissionsResult(int requestCode, String[] permissions, int[] grantResults) {\r\n        super.onRequestPermissionsResult(requestCode, permissions, grantResults);\r\n        //以下代码为处理Android6.0、7.0动态权限所需\r\n        TPermissionType type=PermissionManager.onRequestPermissionsResult(requestCode,permissions,grantResults);\r\n        PermissionManager.handlePermissionsResult(this,type,invokeParam,this);\r\n    }\r\n```    \r\n\r\n4.重写`TPermissionType invoke(InvokeParam invokeParam)`方法，添加如下代码：  \r\n\r\n```java\r\n @Override\r\n    public TPermissionType invoke(InvokeParam invokeParam) {\r\n        TPermissionType type=PermissionManager.checkPermission(TContextWrap.of(this),invokeParam.getMethod());\r\n        if(TPermissionType.WAIT.equals(type)){\r\n            this.invokeParam=invokeParam;\r\n        }\r\n        return type;\r\n    }\r\n```\r\n\r\n5.添加如下代码获取TakePhoto实例：  \r\n\r\n```java\r\n   /**\r\n     *  获取TakePhoto实例\r\n     * @return\r\n     */\r\n    public TakePhoto getTakePhoto(){\r\n        if (takePhoto==null){\r\n            takePhoto= (TakePhoto) TakePhotoInvocationHandler.of(this).bind(new TakePhotoImpl(this,this));\r\n        }\r\n        return takePhoto;\r\n    }    \r\n```\r\n\r\n## API\r\n\r\n### 获取图片\r\nTakePhoto提供拍照，从相册选择，从文件中选择三种方式获取图片。    \r\n\r\n#### API:\r\n\r\n```java\r\n/**\r\n * 从文件中获取图片（不裁剪）\r\n */\r\nvoid onPickFromDocuments();\r\n/**\r\n * 从相册中获取图片（不裁剪）\r\n */\r\nvoid onPickFromGallery();\r\n/**\r\n * 从相机获取图片(不裁剪)\r\n * @param outPutUri 图片保存的路径\r\n */\r\nvoid onPickFromCapture(Uri outPutUri);\r\n/**\r\n * 图片多选\r\n * @param limit 最多选择图片张数的限制\r\n **/\r\nvoid onPickMultiple(int limit);\r\n```\r\n以上三种方式均提供对应的裁剪API，详见：[裁剪图片](https://github.com/crazycodeboy/TakePhoto#裁剪图片)。    \r\n**注：**  \r\n由于不同Android Rom厂商对系统有不同程度的定制，有可能导致某种选择图片的方式不支持，所以为了提高`TakePhoto`的兼容性，当某种选的图片的方式不支持时，`TakePhoto`会自动切换成使用另一种选择图片的方式进行图片选择。      \r\n\r\n### 裁剪图片  \r\n\r\n#### API  \r\n`TakePhoto`支持对图片进行裁剪，无论是拍照的照片,还是从相册、文件中选择的图片。你只需要调用`TakePhoto`的相应方法即可：  \r\n\r\n```java\r\n/**\r\n * 从相机获取图片并裁剪\r\n * @param outPutUri 图片裁剪之后保存的路径\r\n * @param options 裁剪配置             \r\n */\r\nvoid onPickFromCaptureWithCrop(Uri outPutUri, CropOptions options);\r\n/**\r\n * 从相册中获取图片并裁剪\r\n * @param outPutUri 图片裁剪之后保存的路径\r\n * @param options 裁剪配置\r\n */\r\nvoid onPickFromGalleryWithCrop(Uri outPutUri, CropOptions options);\r\n/**\r\n * 从文件中获取图片并裁剪\r\n * @param outPutUri 图片裁剪之后保存的路径\r\n * @param options 裁剪配置\r\n */\r\nvoid onPickFromDocumentsWithCrop(Uri outPutUri, CropOptions options);\r\n/**\r\n * 图片多选，并裁切\r\n * @param limit 最多选择图片张数的限制\r\n * @param options  裁剪配置\r\n * */\r\nvoid onPickMultipleWithCrop(int limit, CropOptions options);\r\n```   \r\n#### 对指定图片进行裁剪     \r\n另外，TakePhoto也支持你对指定图片进行裁剪：     \r\n\r\n```java\r\n/**\r\n * 裁剪图片\r\n * @param imageUri 要裁剪的图片\r\n * @param outPutUri 图片裁剪之后保存的路径\r\n * @param options 裁剪配置\r\n */\r\nvoid onCrop(Uri imageUri, Uri outPutUri, CropOptions options)throws TException;\r\n/**\r\n * 裁剪多张图片\r\n * @param multipleCrop 要裁切的图片的路径以及输出路径\r\n * @param options 裁剪配置\r\n */\r\nvoid onCrop(MultipleCrop multipleCrop, CropOptions options)throws TException;\r\n```\r\n\r\n#### CropOptions\r\n`CropOptions`是用于裁剪的配置类，通过它你可以对图片的裁剪比例，最大输出大小，以及是否使用`TakePhoto`自带的裁剪工具进行裁剪等，进行个性化配置。    \r\n\r\n**Usage:**  \r\n\r\n```java\r\n CropOptions cropOptions=new CropOptions.Builder().setAspectX(1).setAspectY(1).setWithOwnCrop(true).create();  \r\n getTakePhoto().onPickFromDocumentsWithCrop(imageUri,cropOptions);  \r\n //或  \r\n getTakePhoto().onCrop(imageUri,outPutUri,cropOptions);  \r\n\r\n```\r\n\r\n**注：**  \r\n由于不同Android Rom厂商对系统有不同程度的定制，有可能系统中没有自带或第三方的裁剪工具，所以为了提高`TakePhoto`的兼容性，当系统中没有自带或第三方裁剪工具时，`TakePhoto`会自动切换到使用`TakePhoto`自带的裁剪工具进行裁剪。  \r\n\r\n\r\n### 压缩图片\r\n你可以选择是否对图片进行压缩处理，你只需要告诉它你是否要启用压缩功能以及`CompressConfig`即可。  \r\n\r\n#### API\r\n```java\r\n /**\r\n  * 启用图片压缩\r\n  * @param config 压缩图片配置\r\n  * @param showCompressDialog 压缩时是否显示进度对话框\r\n  * @return\r\n  */\r\n void onEnableCompress(CompressConfig config,boolean showCompressDialog);\r\n```\r\n\r\n**Usage:**  \r\n\r\n```java\r\nTakePhoto takePhoto=getTakePhoto();\r\ntakePhoto.onEnableCompress(compressConfig,true);\r\ntakePhoto.onPickFromGallery();\r\n```  \r\n如果你启用了图片压缩，`TakePhoto`会使用`CompressImage`对图片进行压缩处理，`CompressImage`目前支持对图片的尺寸以及图片的质量进行压缩。默认情况下，`CompressImage`开启了尺寸与质量双重压缩。  \r\n\r\n#### 对指定图片进行压缩  \r\n另外，你也可以对指定图片进行压缩：    \r\n**Usage:**  \r\n\r\n```java\r\nnew CompressImageImpl(compressConfig,result.getImages(), new CompressImage.CompressListener() {\r\n    @Override\r\n    public void onCompressSuccess(ArrayList<TImage> images) {\r\n        //图片压缩成功\r\n    }\r\n    @Override\r\n    public void onCompressFailed(ArrayList<TImage> images, String msg) {\r\n        //图片压缩失败\r\n    }\r\n}).compress();\r\n```\r\n\r\n#### CompressConfig  \r\n`CompressConfig`是用于图片压缩的配置类，你可以通过`CompressConfig.Builder`对图片压缩后的尺寸以及质量进行相关设置。如果你想改变压缩的方式可以通过`CompressConfig.Builder`进行相关设置。     \r\n**Usage:**   \r\n\r\n```java\r\nCompressConfig compressConfig=new CompressConfig.Builder().setMaxSize(50*1024).setMaxPixel(800).create();\r\n```\r\n\r\n\r\n## 兼容性\r\n\r\n### Android6.0\r\n由于Android6.0新增了\"运行时权限控制(Runtime Permissions)\"，为了应对这一改变，TakePhoto加入和自动权限管理，当TakePhoto检测到需要权限时，TakePhoto会自动申请权限，所以小伙伴们不用担心权限的使用问题。\r\n\r\n### Android7.0  \r\n\r\n在Android N中，Android 框架执行了 StrictMode，应用间共享文件和以前也有所区别。为了适配Android7.0的改变，同时也为了方便大家使用TakePhoto，TakePhoto会自动根据手机的Android版本自行适配，小伙伴们依旧可以向TakePhoto传递`Uri imageUri = Uri.fromFile(file);`类型的Uri而不用担心兼容性问题。\r\n\r\n### TakePhoto在深度兼容性方面的测试    \r\n![兼容性测试报告](https://raw.githubusercontent.com/crazycodeboy/TakePhoto/master/Screenshots/%E5%85%BC%E5%AE%B9%E6%80%A7%E6%B5%8B%E8%AF%95.jpg)\r\n\r\n### 获取更高的兼容性    \r\n`TakePhot`o是基于Android官方标准API编写的，适配了目前市场上主流的Rom。如果你在使用过程中发现了适配问题，可以[提交Issues](https://github.com/crazycodeboy/TakePhoto/issues)。   \r\n1. 为适配部分手机拍照时会回收`Activity`，`TakePhoto`在`onSaveInstanceState`与 `onCreate`做了相应的恢复处理。  \r\n2. 为适配部分手机拍照或从相册选择图片时屏幕方向会发生转变,从而导致拍照失败的问题，可以在AndroidManifest.xml中对使用了`TakePhoto`的`Activity`添加android:configChanges=\"orientation|keyboardHidden|screenSize\"配置。  \r\neg:  \r\n\r\n```\r\n<activity\r\n    android:name=\".MainActivity\"\r\n    android:screenOrientation=\"portrait\"\r\n    android:configChanges=\"orientation|keyboardHidden|screenSize\"\r\n    android:label=\"@string/app_name\" >\r\n    <intent-filter>\r\n        <action android:name=\"android.intent.action.MAIN\" />\r\n        <category android:name=\"android.intent.category.LAUNCHER\" />\r\n    </intent-filter>\r\n</activity>\r\n```\r\n\r\n\r\n## 贡献  \r\n如果你在使用TakePhoto中遇到任何问题可以提[Issues](https://github.com/crazycodeboy/TakePhoto/issues)出来。另外欢迎大家为TakePhoto贡献智慧，欢迎大家[Fork and Pull requests](https://github.com/crazycodeboy/TakePhoto)。  \r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}